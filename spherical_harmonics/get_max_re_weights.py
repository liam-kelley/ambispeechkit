from torch import tensor, Tensor


def get_max_re_weights_scalor(sph_order: int = 8, device: str = "cpu") -> Tensor:
    """
    Got these weights by precomputing them according to the equations from the
    "direction specific ambisonics source separation with end to end deep learning" paper.
    """
    re_weights_scalor = tensor(
        [
            1.0000000000000000,
            -0.4913746416568756,
            -0.4913746416568756,
            -0.4913746416568756,
            -0.1378264427185059,
            -0.1378264427185059,
            -0.1378264427185059,
            -0.1378264427185059,
            -0.1378264427185059,
            0.4404571354389191,
            0.4404571354389191,
            0.4404571354389191,
            0.4404571354389191,
            0.4404571354389191,
            0.4404571354389191,
            0.4404571354389191,
            -0.2753816843032837,
            -0.2753816843032837,
            -0.2753816843032837,
            -0.2753816843032837,
            -0.2753816843032837,
            -0.2753816843032837,
            -0.2753816843032837,
            -0.2753816843032837,
            -0.2753816843032837,
            -0.1087976694107056,
            -0.1087976694107056,
            -0.1087976694107056,
            -0.1087976694107056,
            -0.1087976694107056,
            -0.1087976694107056,
            -0.1087976694107056,
            -0.1087976694107056,
            -0.1087976694107056,
            -0.1087976694107056,
            -0.1087976694107056,
            0.3274955749511719,
            0.3274955749511719,
            0.3274955749511719,
            0.3274955749511719,
            0.3274955749511719,
            0.3274955749511719,
            0.3274955749511719,
            0.3274955749511719,
            0.3274955749511719,
            0.3274955749511719,
            0.3274955749511719,
            0.3274955749511719,
            0.3274955749511719,
            -0.2056019306182861,
            -0.2056019306182861,
            -0.2056019306182861,
            -0.2056019306182861,
            -0.2056019306182861,
            -0.2056019306182861,
            -0.2056019306182861,
            -0.2056019306182861,
            -0.2056019306182861,
            -0.2056019306182861,
            -0.2056019306182861,
            -0.2056019306182861,
            -0.2056019306182861,
            -0.2056019306182861,
            -0.2056019306182861,
            -0.0971319675445557,
            -0.0971319675445557,
            -0.0971319675445557,
            -0.0971319675445557,
            -0.0971319675445557,
            -0.0971319675445557,
            -0.0971319675445557,
            -0.0971319675445557,
            -0.0971319675445557,
            -0.0971319675445557,
            -0.0971319675445557,
            -0.0971319675445557,
            -0.0971319675445557,
            -0.0971319675445557,
            -0.0971319675445557,
            -0.0971319675445557,
            -0.0971319675445557,
        ][: (sph_order + 1) ** 2],
        device=device,
    )
    return re_weights_scalor


# Precomputation ----------------------------------------------------


def get_legendre_polynomial_dict():
    legendre_polynomials = {
        0: lambda x: 1.0,
        1: lambda x: x,
        2: lambda x: 0.5 * (3 * x**2 - 1),
        3: lambda x: 0.5 * (5 * x**3 - 3 * x),
        4: lambda x: 0.125 * (35 * x**4 - 30 * x**2 + 3),
        5: lambda x: 0.125 * (63 * x**5 - 70 * x**3 + 15 * x),
        6: lambda x: (1 / 16) * (231 * x**6 - 315 * x**4 + 105 * x**2 - 5),
        7: lambda x: (1 / 16) * (429 * x**7 - 693 * x**5 + 315 * x**3 - 35 * x),
        8: lambda x: (1 / 128)
        * (6435 * x**8 - 12012 * x**6 + 6930 * x**4 - 1260 * x**2 + 35),
    }
    return legendre_polynomials


if __name__ == "__main__":
    """
    Run this to precompute the max_re_scalor weights.
    """
    import torch

    order = 8
    max_re_scalor = torch.ones((order + 1) ** 2)
    scalor = torch.cos(torch.deg2rad(torch.tensor([137.9]))) / 1.51
    legendre_polynomials = get_legendre_polynomial_dict()
    for order in range(order + 1):
        start_idx = order**2
        end_idx = (order + 1) ** 2
        max_re_scalor[start_idx:end_idx] *= legendre_polynomials[order](scalor)

    torch.set_printoptions(precision=16)
    print(max_re_scalor)
